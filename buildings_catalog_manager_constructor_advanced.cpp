    ft_sharedptr<ft_building_definition> workshop(new ft_building_definition());
    workshop->id = BUILDING_FACILITY_WORKSHOP;
    workshop->name = ft_string("Facility Workshop");
    workshop->width = 3;
    workshop->height = 3;
    workshop->logistic_cost = 2;
    workshop->logistic_gain = 0;
    workshop->energy_cost = 4.0;
    workshop->energy_gain = 0.0;
    workshop->cycle_time = 12.0;
    workshop->inputs.clear();
    recipe.key = ITEM_ENGINE_PART;
    recipe.value = 1;
    workshop->inputs.push_back(recipe);
    recipe.key = ITEM_COPPER_BAR;
    recipe.value = 2;
    workshop->inputs.push_back(recipe);
    workshop->outputs.clear();
    recipe.key = ITEM_ADVANCED_ENGINE_PART;
    recipe.value = 1;
    workshop->outputs.push_back(recipe);
    workshop->build_costs.clear();
    recipe.key = ORE_IRON;
    recipe.value = 12;
    workshop->build_costs.push_back(recipe);
    recipe.key = ORE_COPPER;
    recipe.value = 16;
    workshop->build_costs.push_back(recipe);
    recipe.key = ORE_COAL;
    recipe.value = 10;
    workshop->build_costs.push_back(recipe);
    workshop->mine_bonus = 0.0;
    workshop->unique = false;
    workshop->occupies_grid = true;
    workshop->removable = true;
    this->register_definition(workshop);

    ft_sharedptr<ft_building_definition> shipyard(new ft_building_definition());
    shipyard->id = BUILDING_SHIPYARD;
    shipyard->name = ft_string("Shipyard");
    shipyard->width = 3;
    shipyard->height = 3;
    shipyard->logistic_cost = 2;
    shipyard->logistic_gain = 0;
    shipyard->energy_cost = 5.5;
    shipyard->energy_gain = 0.0;
    shipyard->cycle_time = 14.0;
    shipyard->inputs.clear();
    recipe.key = ITEM_ADVANCED_ENGINE_PART;
    recipe.value = 2;
    shipyard->inputs.push_back(recipe);
    recipe.key = ITEM_TITANIUM_BAR;
    recipe.value = 3;
    shipyard->inputs.push_back(recipe);
    shipyard->outputs.clear();
    recipe.key = ITEM_SHIP_MODULE;
    recipe.value = 1;
    shipyard->outputs.push_back(recipe);
    shipyard->build_costs.clear();
    recipe.key = ORE_IRON;
    recipe.value = 16;
    shipyard->build_costs.push_back(recipe);
    recipe.key = ORE_COPPER;
    recipe.value = 20;
    shipyard->build_costs.push_back(recipe);
    recipe.key = ORE_MITHRIL;
    recipe.value = 6;
    shipyard->build_costs.push_back(recipe);
    shipyard->mine_bonus = 0.0;
    shipyard->unique = false;
    shipyard->occupies_grid = true;
    shipyard->removable = true;
    this->register_definition(shipyard);

    ft_sharedptr<ft_building_definition> proximity_radar(new ft_building_definition());
    proximity_radar->id = BUILDING_PROXIMITY_RADAR;
    proximity_radar->name = ft_string("Proximity Radar Array");
    proximity_radar->width = 2;
    proximity_radar->height = 2;
    proximity_radar->logistic_cost = 0;
    proximity_radar->logistic_gain = 1;
    proximity_radar->energy_cost = 1.0;
    proximity_radar->energy_gain = 0.0;
    proximity_radar->cycle_time = 0.0;
    proximity_radar->inputs.clear();
    proximity_radar->outputs.clear();
    proximity_radar->build_costs.clear();
    recipe.key = ITEM_IRON_BAR;
    recipe.value = 6;
    proximity_radar->build_costs.push_back(recipe);
    recipe.key = ITEM_COPPER_BAR;
    recipe.value = 6;
    proximity_radar->build_costs.push_back(recipe);
    proximity_radar->mine_bonus = 0.0;
    proximity_radar->convoy_raid_risk_modifier = 0.08;
    proximity_radar->unique = false;
    proximity_radar->occupies_grid = true;
    proximity_radar->removable = true;
    this->register_definition(proximity_radar);

    ft_sharedptr<ft_building_definition> mobile_radar(new ft_building_definition());
    mobile_radar->id = BUILDING_MOBILE_RADAR;
    mobile_radar->name = ft_string("Mobile Defense Radar");
    mobile_radar->width = 2;
    mobile_radar->height = 2;
    mobile_radar->logistic_cost = 0;
    mobile_radar->logistic_gain = 2;
    mobile_radar->energy_cost = 1.5;
    mobile_radar->energy_gain = 0.0;
    mobile_radar->cycle_time = 0.0;
    mobile_radar->inputs.clear();
    mobile_radar->outputs.clear();
    mobile_radar->build_costs.clear();
    recipe.key = ITEM_COPPER_BAR;
    recipe.value = 10;
    mobile_radar->build_costs.push_back(recipe);
    recipe.key = ITEM_MITHRIL_BAR;
    recipe.value = 4;
    mobile_radar->build_costs.push_back(recipe);
    recipe.key = ITEM_ADVANCED_ENGINE_PART;
    recipe.value = 2;
    mobile_radar->build_costs.push_back(recipe);
    mobile_radar->mine_bonus = 0.0;
    mobile_radar->convoy_raid_risk_modifier = 0.12;
    mobile_radar->unique = false;
    mobile_radar->occupies_grid = true;
    mobile_radar->removable = true;
    this->register_definition(mobile_radar);

    ft_sharedptr<ft_building_definition> shield_generator(new ft_building_definition());
    shield_generator->id = BUILDING_SHIELD_GENERATOR;
    shield_generator->name = ft_string("Shield Generator");
    shield_generator->width = 3;
    shield_generator->height = 3;
    shield_generator->logistic_cost = 0;
    shield_generator->logistic_gain = 0;
    shield_generator->energy_cost = 6.0;
    shield_generator->energy_gain = 0.0;
    shield_generator->cycle_time = 0.0;
    shield_generator->inputs.clear();
    shield_generator->outputs.clear();
    shield_generator->build_costs.clear();
    recipe.key = ITEM_TITANIUM_BAR;
    recipe.value = 8;
    shield_generator->build_costs.push_back(recipe);
    recipe.key = ITEM_ACCUMULATOR;
    recipe.value = 4;
    shield_generator->build_costs.push_back(recipe);
    recipe.key = ITEM_ADVANCED_ENGINE_PART;
    recipe.value = 2;
    shield_generator->build_costs.push_back(recipe);
    shield_generator->mine_bonus = 0.0;
    shield_generator->unique = false;
    shield_generator->occupies_grid = true;
    shield_generator->removable = true;
    this->register_definition(shield_generator);

    ft_sharedptr<ft_building_definition> tritium_extractor(new ft_building_definition());
    tritium_extractor->id = BUILDING_TRITIUM_EXTRACTOR;
    tritium_extractor->name = ft_string("Tritium Extractor");
    tritium_extractor->width = 2;
    tritium_extractor->height = 2;
    tritium_extractor->logistic_cost = 2;
    tritium_extractor->logistic_gain = 0;
    tritium_extractor->energy_cost = 4.0;
    tritium_extractor->energy_gain = 0.0;
    tritium_extractor->cycle_time = 10.0;
    tritium_extractor->inputs.clear();
    recipe.key = ORE_OBSIDIAN;
    recipe.value = 2;
    tritium_extractor->inputs.push_back(recipe);
    recipe.key = ORE_CRYSTAL;
    recipe.value = 1;
    tritium_extractor->inputs.push_back(recipe);
    tritium_extractor->outputs.clear();
    recipe.key = ORE_TRITIUM;
    recipe.value = 1;
    tritium_extractor->outputs.push_back(recipe);
    tritium_extractor->build_costs.clear();
    recipe.key = ORE_OBSIDIAN;
    recipe.value = 8;
    tritium_extractor->build_costs.push_back(recipe);
    recipe.key = ORE_CRYSTAL;
    recipe.value = 6;
    tritium_extractor->build_costs.push_back(recipe);
    recipe.key = ITEM_ACCUMULATOR;
    recipe.value = 2;
    tritium_extractor->build_costs.push_back(recipe);
    tritium_extractor->mine_bonus = 0.0;
    tritium_extractor->unique = false;
    tritium_extractor->occupies_grid = true;
    tritium_extractor->removable = true;
    this->register_definition(tritium_extractor);
