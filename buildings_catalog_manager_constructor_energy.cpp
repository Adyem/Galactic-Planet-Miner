    ft_sharedptr<ft_building_definition> generator(new ft_building_definition());
    generator->id = BUILDING_POWER_GENERATOR;
    generator->name = ft_string("Power Generator");
    generator->width = 2;
    generator->height = 2;
    generator->logistic_cost = 0;
    generator->logistic_gain = 0;
    generator->energy_cost = 0.0;
    generator->energy_gain = 6.0;
    generator->cycle_time = 0.0;
    generator->inputs.clear();
    generator->outputs.clear();
    generator->build_costs.clear();
    recipe.key = ORE_COAL;
    recipe.value = 10;
    generator->build_costs.push_back(recipe);
    recipe.key = ORE_COPPER;
    recipe.value = 8;
    generator->build_costs.push_back(recipe);
    generator->mine_bonus = 0.0;
    generator->unique = false;
    generator->occupies_grid = true;
    generator->removable = true;
    this->register_definition(generator);

    ft_sharedptr<ft_building_definition> solar(new ft_building_definition());
    solar->id = BUILDING_SOLAR_ARRAY;
    solar->name = ft_string("Solar Array");
    solar->width = 1;
    solar->height = 1;
    solar->logistic_cost = 0;
    solar->logistic_gain = 0;
    solar->energy_cost = 0.0;
    solar->energy_gain = 3.0;
    solar->cycle_time = 0.0;
    solar->inputs.clear();
    solar->outputs.clear();
    solar->build_costs.clear();
    recipe.key = ORE_IRON;
    recipe.value = 20;
    solar->build_costs.push_back(recipe);
    recipe.key = ORE_COPPER;
    recipe.value = 30;
    solar->build_costs.push_back(recipe);
    solar->mine_bonus = 0.0;
    solar->unique = false;
    solar->occupies_grid = true;
    solar->removable = true;
    this->register_definition(solar);

    ft_sharedptr<ft_building_definition> upgrade(new ft_building_definition());
    upgrade->id = BUILDING_UPGRADE_STATION;
    upgrade->name = ft_string("Mine Upgrade Station");
    upgrade->width = 2;
    upgrade->height = 2;
    upgrade->logistic_cost = 0;
    upgrade->logistic_gain = 0;
    upgrade->energy_cost = 1.0;
    upgrade->energy_gain = 0.0;
    upgrade->cycle_time = 0.0;
    upgrade->inputs.clear();
    upgrade->outputs.clear();
    upgrade->build_costs.clear();
    recipe.key = ORE_IRON;
    recipe.value = 10;
    upgrade->build_costs.push_back(recipe);
    recipe.key = ORE_MITHRIL;
    recipe.value = 4;
    upgrade->build_costs.push_back(recipe);
    upgrade->mine_bonus = 0.15;
    upgrade->unique = false;
    upgrade->occupies_grid = true;
    upgrade->removable = true;
    this->register_definition(upgrade);
