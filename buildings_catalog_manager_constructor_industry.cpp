    ft_sharedptr<ft_building_definition> mine(new ft_building_definition());
    mine->id = BUILDING_MINE_CORE;
    mine->name = ft_string("Mine Core");
    mine->width = 1;
    mine->height = 1;
    mine->logistic_cost = 0;
    mine->logistic_gain = 0;
    mine->energy_cost = 0.0;
    mine->energy_gain = 0.0;
    mine->cycle_time = 0.0;
    mine->inputs.clear();
    mine->outputs.clear();
    mine->build_costs.clear();
    mine->mine_bonus = 0.0;
    mine->unique = true;
    mine->occupies_grid = true;
    mine->removable = false;
    this->register_definition(mine);

    ft_sharedptr<ft_building_definition> smelter(new ft_building_definition());
    smelter->id = BUILDING_SMELTER;
    smelter->name = ft_string("Smelting Facility");
    smelter->width = 2;
    smelter->height = 2;
    smelter->logistic_cost = 1;
    smelter->logistic_gain = 0;
    smelter->energy_cost = 2.0;
    smelter->energy_gain = 0.0;
    smelter->cycle_time = 5.0;
    smelter->inputs.clear();
    Pair<int, int> recipe;
    recipe.key = ORE_IRON;
    recipe.value = 3;
    smelter->inputs.push_back(recipe);
    smelter->outputs.clear();
    recipe.key = ITEM_IRON_BAR;
    recipe.value = 2;
    smelter->outputs.push_back(recipe);
    smelter->build_costs.clear();
    recipe.key = ORE_IRON;
    recipe.value = 12;
    smelter->build_costs.push_back(recipe);
    recipe.key = ORE_COPPER;
    recipe.value = 8;
    smelter->build_costs.push_back(recipe);
    smelter->mine_bonus = 0.0;
    smelter->unique = false;
    smelter->occupies_grid = true;
    smelter->removable = true;
    this->register_definition(smelter);

    ft_sharedptr<ft_building_definition> processor(new ft_building_definition());
    processor->id = BUILDING_PROCESSOR;
    processor->name = ft_string("Processing Unit");
    processor->width = 2;
    processor->height = 2;
    processor->logistic_cost = 1;
    processor->logistic_gain = 0;
    processor->energy_cost = 2.5;
    processor->energy_gain = 0.0;
    processor->cycle_time = 6.0;
    processor->inputs.clear();
    recipe.key = ORE_COPPER;
    recipe.value = 3;
    processor->inputs.push_back(recipe);
    processor->outputs.clear();
    recipe.key = ITEM_COPPER_BAR;
    recipe.value = 2;
    processor->outputs.push_back(recipe);
    processor->build_costs.clear();
    recipe.key = ORE_COPPER;
    recipe.value = 10;
    processor->build_costs.push_back(recipe);
    recipe.key = ORE_COAL;
    recipe.value = 6;
    processor->build_costs.push_back(recipe);
    processor->mine_bonus = 0.0;
    processor->unique = false;
    processor->occupies_grid = true;
    processor->removable = true;
    this->register_definition(processor);

    ft_sharedptr<ft_building_definition> crafting(new ft_building_definition());
    crafting->id = BUILDING_CRAFTING_BAY;
    crafting->name = ft_string("Crafting Bay");
    crafting->width = 3;
    crafting->height = 2;
    crafting->logistic_cost = 2;
    crafting->logistic_gain = 0;
    crafting->energy_cost = 4.0;
    crafting->energy_gain = 0.0;
    crafting->cycle_time = 8.0;
    crafting->inputs.clear();
    recipe.key = ITEM_IRON_BAR;
    recipe.value = 2;
    crafting->inputs.push_back(recipe);
    recipe.key = ITEM_COPPER_BAR;
    recipe.value = 1;
    crafting->inputs.push_back(recipe);
    crafting->outputs.clear();
    recipe.key = ITEM_ENGINE_PART;
    recipe.value = 1;
    crafting->outputs.push_back(recipe);
    crafting->build_costs.clear();
    recipe.key = ORE_IRON;
    recipe.value = 8;
    crafting->build_costs.push_back(recipe);
    recipe.key = ORE_COPPER;
    recipe.value = 10;
    crafting->build_costs.push_back(recipe);
    recipe.key = ORE_COAL;
    recipe.value = 6;
    crafting->build_costs.push_back(recipe);
    crafting->mine_bonus = 0.0;
    crafting->unique = false;
    crafting->occupies_grid = true;
    crafting->removable = true;
    this->register_definition(crafting);
